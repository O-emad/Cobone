@page "/account/data"
@inject IAccountDataService AccountDataService
@inject IAccountAddressDataService AccountAddressDataService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IStringLocalizer<Resource> Loc
@attribute [Authorize]

<MudGrid Spacing="8" Justify="Justify.Center">
    <AccountNavigationMenu Lg="2" Xl="2" Xxl="1" Md="3" Sm="12" Xs="12"></AccountNavigationMenu>
    <MudItem lg="10" xl="10" xxl="11" md="9" sm="12" xs="12" Class="pt-3">
        <MudGrid>
            <MudPaper Class="flex-grow-1 ma-0 " Width="64px" Elevation="3">

            </MudPaper>
        </MudGrid>
                <MudGrid Justify="Justify.Center" Spacing="2">
            <MudItem xs="12" xxl="12">
            <MudCard>
    <MudCardHeader Class="pa-6">
                        <MudText Typo="Typo.h6">@Loc["account_settings"]</MudText>
    </MudCardHeader>
    <MudCardContent>
                        @if(AccountDetails is not null)
                        {
                            <MudStack>
                            <MudTextField @bind-Value="AccountDetails.Firstname" Label="@Loc["account_first_name"]" Disabled="@DisableEdit" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="AccountDetails.Lastname" Label="@Loc["account_last_name"]" Disabled="@DisableEdit" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="AccountDetails.Email" Label="@Loc["account_email"]" Disabled="@DisableEdit" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="AccountDetails.Telephone" Label="@Loc["account_phone"]" Disabled="@DisableEdit" Variant="Variant.Outlined" />
                            </MudStack>
                        }
                    </MudCardContent>
                    <MudCardActions>
                        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="width: 100%;" Class="ma-2">
                        <MudButton Variant="Variant.Filled" FullWidth="true" Size="Size.Large" Class="ma-2"
                        OnClick="OnSettingsButtonClick" Color="Color.Primary">@ButtonText</MudButton>
                        <MudButton Variant="Variant.Filled" FullWidth="true" Size="Size.Large" Class="ma-2"
                                   OnClick="OpenChangePasswordDialog" Color="Color.Primary">@Loc["account_change_password"]</MudButton>
                        </MudStack>
                    </MudCardActions>
        </MudCard>
        </MudItem>
        </MudGrid>
    </MudItem>


</MudGrid>


@code{
    public AccountDetails? AccountDetails { get; set; } = null;
    public bool DisableEdit { get; set; } = true;
    public string ButtonText { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        ButtonText = Loc["account_edit"];
        if(AccountDataService is not null)
        {
            AccountDetails = await AccountDataService.GetAccountDetails();
        }
    }

    private async Task OnSettingsButtonClick()
    {
        if (DisableEdit && AccountDataService is not null)
        {
            DisableEdit = false;
            ButtonText = Loc["account_save"];
            return;
        }
        if(!DisableEdit && AccountDataService is not null && AccountDetails is not null)
        {
            AccountUpdateDetails updateDetails = new AccountUpdateDetails
                {
                    Firstname = AccountDetails.Firstname,
                    Lastname = AccountDetails.Lastname,
                    Telephone = AccountDetails.Telephone,
                    Email = AccountDetails.Email
                };
            await AccountDataService.UpdateAccountDetails(updateDetails);
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add(Loc["account_update"], Severity.Success);
            DisableEdit = true;
            ButtonText = Loc["account_edit"];
            return;
        }
    }

    private async Task OpenChangePasswordDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };
        var dialogParameters = new DialogParameters
            {
                ["snackbarMessage"] = (string)Loc["account_password_changed"]
            };
        var dialog = DialogService.Show<ChangePasswordDialog>((string)Loc["account_change_password"], dialogParameters, closeOnEscapeKey);
        var result = await dialog.Result;
        //if (result is not null && result.Data is not null && (bool)result.Data) await table.ReloadServerData();
    }

}