@page "/account/orders/"

@inject IStringLocalizer<Resource> Loc
@attribute [Authorize]
<MudGrid Spacing="8"  Justify="Justify.Center">
    <AccountNavigationMenu Lg="2" Xl="2" Xxl="1" Md="3" Sm="12" Xs="12"></AccountNavigationMenu>
    <MudItem lg="10" xl="10" xxl="11" md="9" sm="12" xs="12" Class="pt-3">
@*        <MudGrid>
            <MudPaper Class="flex-grow-1 ma-0 " Width="64px" Elevation="3">

            </MudPaper>
        </MudGrid>*@
        <MudGrid Justify="Justify.Center" Spacing="2">
            <MudItem xs="12" xxl="12">
                @*                <MudCard Elevation="4" Style="border-radius:0px">
                <MudCardHeader><MudText Typo="Typo.h4" Class="ma-5">My Orders</MudText></MudCardHeader>
                <MudCardContent>
                <MudPaper Elevation="0" Style="border-radius:0px" Class="d-flex flex-grow-1 gap-4 pa-5">

                <MudTextField Label="Order Id" @bind-Value="orderId" Variant="@Variant.Text" Clearable Class="flex-grow-1" />
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search" Color="Color.Primary" Style="border-radius:20px" OnClick="Search">Search</MudButton>
                </MudPaper>
                </MudCardContent>
                </MudCard>*@
                <MudCard>
                    <MudCardHeader Class="pa-6">
                        <MudText Typo="Typo.h6">@Loc["account_orders"]</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable ServerData="@(new Func<TableState, Task<TableData<AccountOrder>>>(ServerReload))" RowsPerPage="3"
                                  Dense="false" Hover="true" @ref="table" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent" T="AccountOrder">
                            @*            <ToolBarContent>
                            <MudSpacer />
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>*@
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortLabel="name_field" T="AccountOrder">@Loc["account_order_table_name"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortLabel="enabled_field" T="AccountOrder">@Loc["account_order_table_status"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortLabel="total_field" T="AccountOrder">@Loc["account_order_table_total"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortLabel="currency_field" T="AccountOrder">@Loc["account_order_table_currency"]</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortLabel="date_field" T="AccountOrder">@Loc["account_order_table_date"]</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name">@context.name</MudTd>
                                <MudTd DataLabel="Status">@context.status</MudTd>
                                <MudTd DataLabel="Enabled">@context.total</MudTd>
                                <MudTd DataLabel="Enabled">@context.currency_code</MudTd>
                                <MudTd DataLabel="Enabled">@context.date_added</MudTd>
                            </RowTemplate>
                            <NoRecordsContent>
                                <MudText>@Loc["account_order_table_not_found"]</MudText>
                            </NoRecordsContent>
                            <LoadingContent>
                                <MudText>@Loc["account_order_table_loading"]</MudText>
                            </LoadingContent>

                            <PagerContent>
                                <MudTablePager />
                            </PagerContent>
                        </MudTable>
                    </MudCardContent>
                </MudCard>

            </MudItem>
            @if (searched)
            {
                <MudItem xs="12" xxl="12">
                    <MudCard Elevation="4" Style="border-radius:0px">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@Loc["account_order_qr"]</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudDivider Light="true"></MudDivider>
                        <MudCardContent>

                            <MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">
                                <SfQRCodeGenerator Value="@SearchedOrderDetails.order_id">
                                    <QRCodeGeneratorDisplayText  Visibility="false"></QRCodeGeneratorDisplayText>
                                </SfQRCodeGenerator>
                            </MudPaper>


                        </MudCardContent>
                        <MudCardActions>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" xxl="12">
                    <MudCard Elevation="4" Style="border-radius:0px">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@Loc["account_order_details"]</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudDivider Light="true"></MudDivider>
                        <MudCardContent>
                            <div class="d-flex align-end justify-space-between mud-width-full gap-5 flex-wrap px-4">
                                <MudText Typo="Typo.body1"><b>@Loc["account_order_no"]</b> @SearchedOrderDetails.order_id</MudText>
                                <MudText Typo="Typo.body1"><b>@Loc["account_order_payment"]</b> @SearchedOrderDetails.payment_method</MudText>
                                <MudText Typo="Typo.body1"><b>@Loc["account_order_date"]</b> @SearchedOrderDetails.date_modified</MudText>
                                <MudText Typo="Typo.body1"><b>@Loc["account_order_shipping"]</b> @SearchedOrderDetails.shipping_method</MudText>
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" xxl="12">
                    <MudCard Elevation="4" Style="border-radius:0px">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@Loc["account_order_shipping_address"]</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudDivider Light="true"></MudDivider>
                        <MudCardContent>
                            <div class="d-flex align-end justify-space-between mud-width-full gap-5 flex-wrap px-4">
                                <MudText Typo="Typo.body1">@((MarkupString)SearchedOrderDetails.shipping_address)</MudText>
                                </div>
                            </MudCardContent>
                            <MudCardActions>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                <MudItem xs="12" xxl="12">
                    <MudCard Elevation="4" Style="border-radius:0px">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@Loc["account_order_products"]</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudDivider Light="true"></MudDivider>
                        <MudCardContent>
                            @*<div class="d-flex align-stretch flex-grow-1  mud-width-full gap-5 flex-wrap px-4">*@
                            <MudGrid Spacing="4" Justify="Justify.FlexStart" Class="d-flex align-stretch">
                                @foreach (var product in SearchedOrderDetails.products)
                                {
                                    <MudItem xs="12" md="6" lg="4" xl="3" Class="align-stretch d-flex">
                                        <MudCard Class="py-4 d-flex flex-1 " Elevation="3">
                                            <MudCardContent Class="flex-1 d-flex">
                                                <div class="d-flex align-end flex-column mud-width-full gap-5 px-4 align-stretch">
                                                    <div class="d-flex flex-column flex-1 align-self-start">
                                                        <MudText Typo="Typo.body1"><b>@product.name</b></MudText>
                                                        <MudText Typo="Typo.body1">@product.model</MudText>
                                                        <MudText Typo="Typo.body1">
                                                            @product.price_raw X @product.quantity = <b>@product.total</b>
                                                        </MudText>
                                                    </div>
                                                    @*<MudButton Color="Color.Primary" Variant="Variant.Filled" Class="mt-5">Reorder</MudButton>*@
                                                </div>
                                            </MudCardContent>
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>
                            @*</div>*@
                        </MudCardContent>
                        <MudCardActions>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" xxl="12">
                    <MudCard Elevation="4" Style="border-radius:0px">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@Loc["account_order_invoice"]</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudDivider Light="true"></MudDivider>
                        <MudCardContent>
                            <div class="d-flex align-end justify-space-between mud-width-full gap-5 px-4">
                                <div class="d-flex flex-column">
                                    @foreach (var item in SearchedOrderDetails.totals)
                                    {
                                        <MudText Typo="Typo.body1"><b>@item.title:</b> @item.value</MudText>
                                    }
                                </div>
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" xxl="12">
                    <MudCard Elevation="4" Style="border-radius:0px">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@Loc["account_order_history"]</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudDivider Light="true"></MudDivider>
                        <MudCardContent>
                            <MudGrid Spacing="4" Justify="Justify.FlexStart" Class="d-flex align-stretch">
                                @foreach (var history in SearchedOrderDetails.histories)
                                {
                                    <MudItem xs="12" md="6" lg="4" xl="3" Class="align-stretch d-flex">
                                        <MudCard Class="py-4 d-flex flex-1 " Elevation="3">
                                            <MudCardContent Class="flex-1 d-flex">
                                                <div class="d-flex align-end flex-column mud-width-full gap-5 px-4 align-stretch">
                                                    <div class="d-flex flex-column flex-1 align-self-start">
                                                        <MudText Typo="Typo.body1"><b>@Loc["account_order_status"]</b>@($"{history.status}")</MudText>
                                                            <MudText Typo="Typo.body1"><b>@Loc["account_order_date"]</b>@($"{history.date_added}")</MudText>
                                                            <MudText Typo="Typo.body1">
                                                                <b>@Loc["account_order_comment"]</b>@($"{history.comment}")
                                                        </MudText>
                                                    </div>
                                                </div>
                                            </MudCardContent>
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>

                        </MudCardContent>
                        <MudCardActions>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
    <MudItem lg="10" xl="10" xxl="11" md="9" sm="8" xs="8" Class="pt-3">

    </MudItem>


</MudGrid>


@code {
    [Inject]
    public IAccountOrderDataService AccountOrderDataService { get; set; }
    private string orderId = "";
    private bool searched = false;
    private AccountOrderDetails SearchedOrderDetails { get; set; }
    private IEnumerable<AccountOrder> pagedData;
    private MudTable<AccountOrder>? table;
    private int totalItems;
    private int selectedRowNumber = -1;

    private async Task<TableData<AccountOrder>> ServerReload(TableState state)
    {

        if (AccountOrderDataService is null) return new TableData<AccountOrder>();
        var ordersData = await AccountOrderDataService.GetAccountOrders(state.Page, state.PageSize);
        IEnumerable<AccountOrder> data = ordersData.Item2;
        await Task.Delay(300);
        data = data.ToArray();
        totalItems = ordersData.Item1;
        switch (state.SortLabel)
        {
            case "enabled_field":
                data = data.OrderByDirection(state.SortDirection, o => o.status);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.name);
                break;
        }

       // pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<AccountOrder>() { TotalItems = totalItems, Items = data };
    }

    private async Task RowClickEvent(TableRowClickEventArgs<AccountOrder> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Row.Class.Contains("selected-table-row"))
        {
            searched = false;
        }
        else
        {
            var id = int.Parse(table.SelectedItem.order_id);
            if (AccountOrderDataService is not null)
            {
                SearchedOrderDetails = await AccountOrderDataService.GetAccountOrderDetails(id);
                searched = true;
                StateHasChanged();
            }
        }

    }

    private string SelectedRowClassFunc(AccountOrder element, int rowNumber)
    {
        if (table is null) return string.Empty;
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (table.SelectedItem != null && table.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected-table-row";
        }
        else
        {
            return string.Empty;
        }
    }

    //public async void Search()
    //{
    //    if (AccountOrderDataService is not null)
    //    {
    //        var id = int.Parse(orderId);
    //        SearchedOrderDetails = await AccountOrderDataService.GetAccountOrderDetails(id);
    //        searched = true;
    //    }
    //    StateHasChanged();
    //}
}
