@inherits LayoutComponentBase
@inject ICategoryDataService CategoryDataService
@inject IHomeDataService HomeDataService
@inject NavigationManager NavigationManager
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudGrid Justify="Justify.Center" Spacing="1">

        <!---TopAddCarousel-->
        <MudItem Style="margin-top:15px; justify-content:center;">
            @if (HomeData is not null && HomeData is not default(Home?))
            {
                <TopAddCarousel SliderData="@HomeData.Slider" />
            }
        </MudItem>

        <MudItem sm="12" xs="12" Style="padding:2">
            <MudDivider Style="background-color:#000; opacity:0.125" />
        </MudItem>


        <!---AppBar-->
        <MudItem sm="10" xs="10" Style="padding:2">
            <MudAppBar Fixed="false" Color="Color.Transparent" Elevation="0">
                <MudLink Href="/">
                    <MudImage Src="images/cobone-icon.svg" />
                </MudLink>
                <MudSpacer />



                <MudMenu FullWidth="true" Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    <ActivatorContent>
                        
                        <MudButton DisableElevation="true" DisableRipple="true">
                            <MudGrid Class="m-0">
                                <MudItem lg="12" xl="12" xs="12" md="12" sm="12" xxl="12" Class="m-0 p-0">
                            <MudBadge Visible="false" Overlap="true" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Outlined.AccountCircle" Size="Size.Large" />
                            </MudBadge>
                            </MudItem>
                            <MudItem lg="12" xl="12" xs="12" md="12" sm="12" xxl="12" Class="m-0 p-0">
                                 <MudText Typo="Typo.button">Account</MudText>
                            </MudItem>
                            </MudGrid>
                            
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="account/orders">Orders</MudMenuItem>
                        <MudMenuItem Href="account/credit">Credits</MudMenuItem>
                        <MudMenuItem Href="account/data">Settings</MudMenuItem>
                        <MudMenuItem>Logout</MudMenuItem>
                    </ChildContent>
                </MudMenu>



                <MudButton DisableElevation="true" DisableRipple="true">
                            <MudGrid Class="m-0">
                                <MudItem lg="12" xl="12" xs="12" md="12" sm="12" xxl="12" Class="m-0 p-0">
                            <MudBadge Content="@ShoppingCartContent" Visible="@(ShoppingCartContent>0)" Overlap="true" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Outlined.ShoppingCart" Size="Size.Large" />
                            </MudBadge>
                            </MudItem>
                            <MudItem lg="12" xl="12" xs="12" md="12" sm="12" xxl="12" Class="m-0 p-0">
                                 <MudText Typo="Typo.button">Cart</MudText>
                            </MudItem>
                            </MudGrid>
                </MudButton>



                @*                <MudBreadcrumbs Items="_items">
                    <SeparatorTemplate>
                    <span>|</span>
                    </SeparatorTemplate>
                    <ItemTemplate Context="item">
                    <MudButton DisableElevation="true" DisableRipple="true">
                    <MudBadge Content="item.Href" Visible="@(!item.Disabled)" Overlap="true" Color="Color.Primary">
                    <MudIcon Icon="@item.Icon" Size="Size.Large" />
                    </MudBadge>
                    </MudButton>
                    </ItemTemplate>
                    </MudBreadcrumbs>*@

            </MudAppBar>
        </MudItem>

        <MudItem sm="12" xs="12" Style="padding:2">
            <MudDivider Style="background-color:#000; opacity:0.125; height:2px" />
        </MudItem>

        <!---CategoriesAppBar-->
        <MudItem sm="10" xs="10">
            <MudAppBar Fixed="false" Elevation="0" Style="height:auto; justify-content:center" DisableGutters="true" Class="overflow-auto">
                @if (Categories is not null && Categories.Count > 0)
                {
                    foreach (var category in Categories)
                    {

                        <MenuButton Style="height:auto" ButtonLabel="@category.Name">
                            @*                          <ProductPreview>
                                <ProductCard xs="7" sm="6" md="5" lg="4" xl="3"></ProductCard>
                                </ProductPreview>
                                <SubCategories>
                                <MudItem xs="5" sm="6" md="7" lg="8" xl="9"></MudItem>
                                </SubCategories>*@
                        </MenuButton>

                    }
                }
            </MudAppBar>
        </MudItem>

    </MudGrid>


    <MudMainContent>

        <CascadingValue Value="this">
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-0">
                <MudGrid Justify="Justify.Center" Spacing="2">
                    <MudItem xs="10">
                        @Body
                    </MudItem>
                </MudGrid>
            </MudContainer>
        </CascadingValue>

        <MudScrollToTop>
            <MudFab Color="Color.Primary" IconSize="Size.Large" Icon="@Icons.Filled.ArrowCircleUp" />
        </MudScrollToTop>

    </MudMainContent>


</MudLayout>


@code {

    public List<Category> Categories { get; set; }
    public Home? HomeData { get; set; }
    private BreadcrumbItem item;
    private MudButton button;
    public int ShoppingCartContent { get; set; } = 1;
    private void MoveToIndex()
    {
        NavigationManager.NavigateTo("/");
    }
    protected override async Task OnInitializedAsync()
    {
        if (CategoryDataService is not null)
        {
            Categories = (await CategoryDataService.GetCategories()).ToList();
        }
        if (HomeDataService is not null)
        {
            HomeData = await HomeDataService.GetHomeData();
        }
    }

}