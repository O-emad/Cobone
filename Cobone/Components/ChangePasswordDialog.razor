@using System.Text.RegularExpressions;
@inject IAccountDataService AccountDataService
@inject ISnackbar Snackbar
    <MudDialog>
        <DialogContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudStack>
            <MudTextField T="string" Label="New Password" HelperText="Choose a strong password" @ref="pwField1"
                          InputType="InputType.Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Password is required!" />
            <MudTextField T="string"
                          Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                          Validation="@(new Func<string, string>(PasswordMatch))" />
            </MudStack>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        </DialogActions>
    </MudDialog>
@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    //public AccountPasswordChange PasswordChange { get; set; } = new AccountPasswordChange();
    [Parameter] public string snackbarMessage { get; set; } = "";
    MudTextField<string>? pwField1;
    string[] errors = { };
    MudForm? form;
    bool success;

    async Task Submit()
    {
        await form.Validate();
        if (AccountDataService is not null && success && pwField1 is not null)
        {
            try
            {
                AccountPasswordChange passwordChange = new AccountPasswordChange
                    {
                        Password = pwField1.Value,
                        Confirm = pwField1.Value

                        };
                    await AccountDataService.ChangePassword(passwordChange);
                    Snackbar.Clear();
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add(snackbarMessage, Severity.Success);
                    MudDialog?.Close(DialogResult.Ok(true));
                    return;
                
            }
            catch (Exception)
            { }
        }
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add("Failed to Update Password", Severity.Error);
        MudDialog?.Close(DialogResult.Ok(false));
    }
    void Cancel() => MudDialog?.Cancel();
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}